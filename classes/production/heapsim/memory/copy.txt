package memory;

/**
 * This memory model allocates memory cells based on the first-fit method.
 *
 * @author "Johan Holmberg, Malmö university"
 * @since 1.0
 */

import com.sun.source.tree.Tree;

import java.awt.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.TreeMap;

/**
 * Används för uppgift 1 & 3
 * read first available block, and then continue until amount of available spaces in a row fits the memory space.
 */
public class FirstFit extends Memory {
    private LinkedList availableMemory;
    private int size;
    private int memoryCounter = 0;
    private int mapSize;
    private TreeMap<Integer, Integer> memorySpace;

    /**
     * Initializes an instance of a first fit-based memory.
     *
     * @param size The number of cells.
     */

    public FirstFit(int size) {
        super(size);
        this.size = size;
        mapSize = size;
        memorySpace = new TreeMap<>();
        // TODO Implement this!
    }


    /**
     * Allocates a number of memory cells.
     *
     * @param size the number of cells to allocate.
     * @return The address of the first cell.
     */
    @Override
    public Pointer alloc(int size) {
        Pointer tempPoint = new Pointer(-1, this);
        // TODO Implement this!
        /* locate the next address by adding the address and memory space
        check if theres a lower key
        use higher key to find the next position
        lowerkey and higherkey to pinpoint space between for first fit
        * */

        if (memorySpace.isEmpty()) {
            tempPoint = new Pointer(0, this);
            memorySpace.put(tempPoint.pointsAt(), size);
            return tempPoint;
        }
        else {
            for (Map.Entry<Integer, Integer> entry : memorySpace.entrySet()) {
                //System.out.println("entry " + memorySpace.firstKey());
                if (memorySpace.lowerKey(entry.getKey()) != null) {  //there is a key lower than our current, now to navigate!!
                    if (memorySpace.higherKey(entry.getKey()) != null) { //now to find the next higher key
                        int freeSpace = memorySpace.lowerKey(size);
                        int endOfSpace = memorySpace.higherKey(size);
                        //System.out.println("our entry key is " + endOfSpace);

                        if (size <= (endOfSpace - freeSpace)) { //if there is enough space to allocate, we can put right now
                            tempPoint = new Pointer(freeSpace, this); //
                            memorySpace.put(tempPoint.pointsAt(), size);
                            //System.out.println("1allocated " + size + " at address: " + tempPoint.pointsAt());
                            return tempPoint;
                        }
                    } else { //if there is no higher key than the current pointer, then we can append directly to the lowest
                        int freeSpace = memorySpace.lowerKey(size);
                        System.out.println(freeSpace);
                        tempPoint = new Pointer(memorySpace.lowerKey(size), this); //
                        memorySpace.put(tempPoint.pointsAt(), size);
                        //System.out.println("2allocated " + size + " at address: " + tempPoint.pointsAt());
                        return tempPoint;
                    }
                } else { //is there is no lower key than our current, we can place it at start
                    tempPoint = new Pointer(0, this); //locate at start
                    memorySpace.put(tempPoint.pointsAt(), size);
                    System.out.println("3allocated " + size + " at address: " + tempPoint.pointsAt());
                    //return tempPoint;
                }
            }
        }

        //System.out.println("allocated " + size + " at address: " + tempPoint.pointsAt());

        return tempPoint; //return invalid pointer
    }

    /**
     * Releases a number of data cells
     *
     * @param p The pointer to release.
     */
    @Override
    public void release(Pointer p) {
        // TODO Implement this!
        // Check if the Pointer p is in the memorySpace map
        if (memorySpace.containsKey(p.pointsAt())) {
            memorySpace.remove(p.pointsAt());
            System.out.println("removed memory space at address: " + p.pointsAt());
        }
    }


    /**
     * Prints a simple model of the memory. Example:
     * <p>
     * |    0 -  110 | Allocated
     * |  111 -  150 | Free
     * |  151 -  999 | Allocated
     * | 1000 - 1024 | Free
     */
    public void printLayout() {
        int cBlockStart = 0;
        String cblockType = cells[0] == 0 ? "Free" : "Allocated";

        for (int i = 0; i < cells.length; i++) {
            if ((cells[i] == 0 && cblockType.equals("Allocated")) || (cells[i] != 0 && cblockType.equals("Free"))) {
                System.out.printf("%d - %d | %s%n", cBlockStart, i - 1, cblockType);
                cBlockStart = i;
                cblockType = cells[i] == 0 ? "Free" : "Allocated";
            }
        }
        System.out.printf("%d - %d | %s%n", cBlockStart, cells.length - 1, cblockType);
    }

    public void printTable() {
        //for (Map.Entry<Pointer, Integer> entry : memorySpace.entrySet()) {
        //System.out.println("address: " + entry.getKey() + ", " + entry.getValue());
        //  }
    }
}


@Override
    public Pointer alloc(int size) {
        Pointer tempPoint = new Pointer(-1, this);

        if (memorySpace.isEmpty()) {
            tempPoint = new Pointer(0, this);
            memorySpace.put(tempPoint.pointsAt(), size);
            return tempPoint;
        }

            for (Map.Entry<Integer, Integer> entry : memorySpace.entrySet()) {
                 if (entry.getKey() == memorySpace.lastKey()) { //if were at the end
                     /**
                      * issue here is if we remove something in the middle, then it will keep on stacking
                      * the values at the end when we want it to remove it in the middle
                      */
                     int freeSpace = memorySpace.lastKey() + entry.getValue();
                     if (freeSpace < mapSize) {
                         tempPoint = new Pointer(freeSpace, this);
                         memorySpace.put(tempPoint.pointsAt(), size);
                         System.out.println("Allocated: " +  tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
                         return tempPoint;
                     }
                 }
                 if (memorySpace.lowerEntry(entry.getValue()) != null) {
                     //System.out.println(memorySpace.lowerEntry(entry.getValue()).getValue());
                     int freeSpace = memorySpace.lowerEntry(entry.getValue()).getValue();
                     tempPoint = new Pointer(freeSpace, this);
                     memorySpace.put(tempPoint.pointsAt(), size);
                     System.out.println("Allocated: " +  tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
                     return tempPoint;
                 }
            }
        return tempPoint; //return invalid pointer
    }


    for (Map.Entry<Integer, Integer> entry : memorySpace.entrySet()) {
                int freeSpace = entry.getKey() + entry.getValue();
                if (memorySpace.higherEntry(entry.getKey()) == null) {
                    memorySpace.put(freeSpace, size);
                    System.out.println("Allocated: " + tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
                    return tempPoint;
                } else if ((memorySpace.higherEntry(entry.getKey()).getValue()) >= size) { // if not null
                    memorySpace.put(tempPoint.pointsAt(), size);
                    System.out.println("Allocated: " + tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
                    return tempPoint;
                } else if (memorySpace.lastKey() == entry.getKey()) {
                    if (freeSpace <= mapSize) {
                        freeSpace = entry.getKey() + entry.getValue();
                        tempPoint = new Pointer(freeSpace, this);
                        memorySpace.put(tempPoint.pointsAt(), size);
                        System.out.println("Allocated: " + tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
                        return tempPoint;
                    }
                }
            }


            for (Map.Entry<Integer, Integer> entry : memorySpace.entrySet()) {
                        int freeSpace = entry.getKey() + entry.getValue();
                        if (memorySpace.lowerKey(entry.getKey()) == null) { //there is no lower key than entry.getKey
                            if (entry.getKey() != 0) {//if its not 0, lets see if we can add memory from 0
                                if (entry.getKey() >= size) { //if there is space to add without overriding, then allocate OK
                                    System.out.println(entry.getKey() + " key");
                                    tempPoint = new Pointer(0, this);
                                    memorySpace.put(0, size);
                                    System.out.println("Allocated: " + tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
                                    return tempPoint;
                                }
                            }
                        }
                        else if (memorySpace.lowerKey(entry.getKey()) != null) { //if there is a key lower than entry we want to check the next space available
                            //System.out.println("Allocated: " + tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
                        }

                    }


                    KANSKE
                    @Override
                        public Pointer alloc(int size) {
                            Pointer tempPoint = new Pointer(-1, this);

                            if (memorySpace.isEmpty()) {
                                tempPoint = new Pointer(0, this);
                                memorySpace.put(tempPoint.pointsAt(), size);
                                System.out.println("1Allocated: " +  tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
                                return tempPoint;
                            }

                            for (Map.Entry<Integer, Integer> entry : memorySpace.entrySet()) {
                                if (memorySpace.lowerEntry(entry.getKey()) != null) {
                                    System.out.println(entry.getKey() + " <-- key");
                                    int freeSpace = memorySpace.lowerEntry(entry.getKey()).getValue() + entry.getKey();
                                    System.out.println("freespace " + freeSpace + " and size: " + size);
                                    tempPoint = new Pointer(freeSpace, this);
                                    memorySpace.put(tempPoint.pointsAt(), size);
                                    System.out.println("2Allocated: " +  tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
                                    return tempPoint;
                                }
                                else if (memorySpace.lowerKey(entry.getKey()) == null) { //there is no lower key than entry.getKey
                                    if (entry.getKey() != 0) {//if its not 0, lets see if we can add memory from 0
                                        if (entry.getKey() >= size) { //if there is space to add without overriding, then allocate OK
                                            tempPoint = new Pointer(0, this);
                                            memorySpace.put(0, size);
                                            System.out.println("3Allocated: " + tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
                                            return tempPoint;
                                        }
                                    }
                                }

                                if (entry.getKey() == memorySpace.lastKey()) { //if were at the end
                                    int freeSpace = entry.getKey() + entry.getValue();
                                    if (freeSpace < mapSize) {
                                        tempPoint = new Pointer(freeSpace, this);
                                        memorySpace.put(tempPoint.pointsAt(), size);
                                        System.out.println("4Allocated: " +  tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
                                        return tempPoint;
                                    }
                                }

                            }
                            return tempPoint; //return invalid pointer
                        }


	@Override
	public Pointer alloc(int size) {
		Pointer tempPoint = new Pointer(-1, this);
		int nextFreeSpace = 0;
		int endOfSpace = 0;
		int newAdress = 0;
		int newSpace = 0;
		int oldSize = 0; //to compare if oldsize is lower than current size and can squeeze in size

		if (memorySpace.isEmpty()) {
			tempPoint = new Pointer(0, this);
			memorySpace.put(tempPoint.pointsAt(), size);
			System.out.println("1Allocated: " +  tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
			return tempPoint;
		}

		for (Map.Entry<Integer, Integer> entry : memorySpace.entrySet()) {
			nextFreeSpace = entry.getKey() + entry.getValue();
			if (nextFreeSpace <= mapSize) {
				if (memorySpace.higherKey(entry.getKey()) != null) { //if there is a key higher than current entry
					//check if there is enough space to allocate

					endOfSpace = memorySpace.higherKey(entry.getKey()); //next start of address
					if ((endOfSpace-nextFreeSpace) >= size) { //check first that there is enough space
						//if ok, check if its less than oldSize
						if (oldSize > (endOfSpace-nextFreeSpace)) {
							newAdress = endOfSpace-nextFreeSpace; //keep on iterating until we find the most optimal size
							System.out.println(newAdress + " free Cells");
							System.out.println("2Allocated: " +  tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
							//after were done, we can assign the address
						}
					}
				}

				if (memorySpace.lowerKey(entry.getKey()) == null) { //there is no lower key than entry.getKey
					if (entry.getKey() != 0) {//if its not 0, lets see if we can add memory from 0
						if (entry.getKey() >= size) { //if there is space to add without overriding, then allocate OK
							tempPoint = new Pointer(0, this);
							memorySpace.put(0, size);
							System.out.println("3Allocated: " +  tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
							return tempPoint;
						}
					}
				}
				if (entry.getKey() == memorySpace.lastKey()) { //if were at the end -- keep this
					nextFreeSpace = entry.getKey() + entry.getValue();
					tempPoint = new Pointer(nextFreeSpace, this);
					memorySpace.put(tempPoint.pointsAt(), size);
					System.out.println("4Allocated: " +  tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
					return tempPoint;
				}
			}

		}
		tempPoint = new Pointer(newAdress, this);
		memorySpace.put(tempPoint.pointsAt(), size);
		System.out.println("5Allocated: " +  tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));

		return tempPoint; //return invalid pointer
	}


@Override
    public Pointer alloc(int size) {
        Pointer tempPoint = new Pointer(-1, this);
        int nextFreeSpace = 0;
        int endOfSpace = 0;
        int newAdress = 0;
        int newSpace = 0;
        int oldSize = Integer.MAX_VALUE; //to compare if oldsize is lower than current size and can squeeze in size

        if (memorySpace.isEmpty()) {
            tempPoint = new Pointer(0, this);
            memorySpace.put(tempPoint.pointsAt(), size);
            return tempPoint;
        }

        for (Map.Entry<Integer, Integer> entry : memorySpace.entrySet()) {
            nextFreeSpace = entry.getKey() + entry.getValue();
            if ((nextFreeSpace+size) <= mapSize) {
                if (memorySpace.higherKey(entry.getKey()) != null) { //if there is a key higher than current entry
                    //check if there is enough space to allocate
                    endOfSpace = memorySpace.higherKey(entry.getKey()); //next start of address
                    if ((endOfSpace - nextFreeSpace) >= size) { //check first that there is enough space
                        //if ok, check if its less than oldSize
                        if (oldSize >= (endOfSpace - nextFreeSpace)) {
                            oldSize = endOfSpace - nextFreeSpace; //keep on iterating until we find the most optimal size
                            System.out.println(oldSize + " free Cells");
                            //after were done, we can assign the address
                        }
                    }
                }

                if (memorySpace.lowerKey(entry.getKey()) == null) { //there is no lower key than entry.getKey
                    if (entry.getKey() != 0) {//if its not 0, lets see if we can add memory from 0
                        if (entry.getKey() >= size) { //if there is space to add without overriding, then allocate OK
                            tempPoint = new Pointer(0, this);
                            memorySpace.put(0, size);
                           // System.out.println("3Allocated: " + tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
                            return tempPoint;
                        }
                    }
                }
            }
        }


        tempPoint = new Pointer(nextFreeSpace, this);
        memorySpace.put(tempPoint.pointsAt(), size);
        //System.out.println("5Allocated: " + tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));

        return tempPoint; //return invalid pointer
    }

for (Map.Entry<Integer, Integer> entry : memorySpace.entrySet()) {
            nextFreeSpace = entry.getKey() + entry.getValue();
            if ((nextFreeSpace) <= mapSize) {
                if (memorySpace.lowerKey(entry.getKey()) != null) { //if there is a key lower than current one
                    if (memorySpace.higherKey(nextFreeSpace) != null)  { //check where the greatest gap is
                        int freeSpace = memorySpace.lowerEntry(entry.getKey()).getValue() + memorySpace.lowerEntry(entry.getKey()).getKey();
                        endOfSpace = memorySpace.higherKey(entry.getKey());
                        System.out.println("lowerFreeSpace " + freeSpace);
                        System.out.println("endOfSpace " + endOfSpace);
                        System.out.println("current Address " + nextFreeSpace);
                        if ((endOfSpace-freeSpace) >= size) { //if there is space,
                            if (oldSize >= (endOfSpace - freeSpace)) { //is it less than the best size?
                                oldSize = endOfSpace - freeSpace; //keep on iterating until we find the most optimal size
                                System.out.println("size changed to " + oldSize);
                                newAdress = freeSpace;
                                //after were done, we can assign the address
                            }
                        }
                    }
                }
                else if (memorySpace.lowerKey(entry.getKey()) == null) { //there is no lower key than entry.getKey
                    if (entry.getKey() != 0) {//if its not 0, lets see if we can add memory from 0
                        if (entry.getKey() >= size) { //if there is space to add without overriding, then allocate OK
                            tempPoint = new Pointer(0, this);
                            memorySpace.put(0, size);
                            System.out.println("3Allocated: " + tempPoint.pointsAt() + " - " + (tempPoint.pointsAt() + size));
                            return tempPoint;
                        }
                    }
                }
            }
            counter++;
            System.out.println("count: " + counter);
        }
